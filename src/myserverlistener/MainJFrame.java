package myserverlistener;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.ScrollPaneConstants;

import myserverlistener.multithreadcode.*;
import myserverlistener.servicepkg.TextAreaHandler;

public class MainJFrame extends javax.swing.JFrame {

    private java.awt.GridBagConstraints c = new java.awt.GridBagConstraints(); 
    private java.awt.GridBagConstraints c2 = new java.awt.GridBagConstraints(); 
    final static boolean shouldFill = true;
    final static boolean shouldWeightX = true;
    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * 
     * JOVAN SAYS: disregard that, better do it by hand
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        this.setPreferredSize(new java.awt.Dimension(640, 480));
        //jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        
        tabbedPane = new JTabbedPane();
//        jButton1 = new javax.swing.JButton();
            java.awt.Container generalPane = this.getContentPane();
            java.awt.Container pane = new JPanel();
            
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            java.awt.GridBagLayout layout = new java.awt.GridBagLayout();
            pane.setLayout(layout);
            
            generalPane.setLayout(new BorderLayout());
            generalPane.add(tabbedPane, BorderLayout.CENTER);
            tabbedPane.addTab("N1", pane);
        jScrollPane1.setViewportView(jEditorPane1);
        jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jEditorPane1.setEditable(false);
        //javax.swing.JButton button;
        GridBagConstraints c = new GridBagConstraints();
	if (shouldFill) {
	//natural height, maximum width
	c.fill = GridBagConstraints.HORIZONTAL;
	}

	//button = new javax.swing.JButton("Button 1");
	if (shouldWeightX) {
	c.weightx = 0.5;
	}

	//button = new javax.swing.JButton("Long-Named Button 4");
	c.fill = GridBagConstraints.BOTH;
	c.ipady = 40;      //make this component tall
	c.weightx = 0.9;
        c.weighty=7.0;
	c.gridwidth = 3;
	c.gridx = 0;
	c.gridy = 1;
	pane.add(jScrollPane1, c);
        //connect-disconnect button
	button = new javax.swing.JButton("Запуск");
	c.fill = GridBagConstraints.NONE;
	c.ipady = 0;       //reset to default
	c.weighty = 0.03;   //request no extra vertical space
	c.anchor = GridBagConstraints.PAGE_END; //bottom of space
	c.insets = new Insets(1,0,0,0);  //top padding
	c.gridx = 1;       //aligned with button 2
	c.gridwidth = 1;   //2 columns wide
	c.gridy = 2;       //third row
        c.weightx=0.5;
	pane.add(button, c);
        
        java.awt.Container pane2 = new JPanel();
        
        java.awt.GridBagLayout layout2 = new java.awt.GridBagLayout();
        layout2.rowWeights = new double[] {0.90,0.10};
        layout2.columnWeights = new double[] {0.75, 0.25};
        pane2.setLayout(layout2);
        jScrollPane2 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JTextPane();
        jScrollPane2.setViewportView(jEditorPane2);
        jScrollPane2.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jEditorPane2.setEditable(true);
        sendToPanel = new JPanel();
        sendToPanel.setBorder(javax.swing.BorderFactory.createTitledBorder( javax.swing.BorderFactory.createLineBorder(java.awt.Color.BLUE), "Отримувач") ); 
        sendToPanel.setLayout(new BorderLayout());
        
        sendMsgButton = new javax.swing.JButton("Відправить");
        
        GridBagConstraints c22 = new GridBagConstraints();
        c22.fill = GridBagConstraints.BOTH;
	c22.ipady = 40;      //make this component tall
        c22.weighty=7.0;
	c22.gridwidth = 1;
	c22.gridx = 0;
	c22.gridy = 0;
	pane2.add(jScrollPane2, c22);
        c22.gridx=1; c2.gridy = 0;
        c22.gridwidth = 1;
        pane2.add(sendToPanel, c22);
        c22.gridx=0;
        c22.gridy=1;
        c22.weighty=0;
        c22.ipady=0;
        c22.fill=GridBagConstraints.NONE;
        c22.anchor = GridBagConstraints.LINE_START;
        pane2.add(sendMsgButton, c22);
        
        java.awt.Container internalMsgParam = new JPanel();
        GridBagLayout layout3 = new GridBagLayout();
        internalMsgParam.setLayout(layout3);
        GridBagConstraints c3 = new GridBagConstraints();
        portLabel = new JLabel("Порт");
        hostLabel = new JLabel("Хост");
        hostLine = new JTextField();
        
        DecimalFormat format = (DecimalFormat) DecimalFormat.getInstance();
        format.setGroupingUsed(false);
        javax.swing.text.NumberFormatter formatter = new javax.swing.text.NumberFormatter(format);
        formatter.setValueClass(Integer.class);
        formatter.setMinimum(10); //who would set port less than 10? way too risky...
        formatter.setMaximum(65535);
        formatter.setAllowsInvalid(false);
        // If you want the value to be committed on each keystroke instead of focus lost
        formatter.setCommitsOnValidEdit(true);
        portLine = new JFormattedTextField(formatter);
        portLine.setValue(80); 
        
        c3.gridx = 0; c3.gridy=0; c3.fill =GridBagConstraints.NONE; c3.weightx = 0.0;
        internalMsgParam.add(hostLabel, c3);
        c3.gridx = 1; c3.gridy=0; c3.fill =GridBagConstraints.HORIZONTAL; c3.weightx = 1.0;
        internalMsgParam.add(hostLine, c3);
        c3.gridx = 0; c3.gridy=1; c3.fill =GridBagConstraints.NONE; c3.weightx = 0.0;
        internalMsgParam.add(portLabel, c3); 
        c3.gridx = 1; c3.gridy=1;  c3.fill =GridBagConstraints.HORIZONTAL; c3.weightx = 1.0;
        internalMsgParam.add(portLine, c3);
        sendToPanel.add(internalMsgParam, BorderLayout.NORTH);
        tabbedPane.addTab("N2", pane2); 
        
        
        javax.swing.JFrame piercingClosure = this;
        button.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (serverStarted == false) {
                    //show dialog with port selection
                    CustomDialog myDialog = new CustomDialog(piercingClosure, true, "Порт", usedPort);
                    if (myDialog.getAnswer()) {
                        //start server with provided port
                        Integer inpPort = myDialog.getPortValue();
                        startServerDispatcher(inpPort);
                        usedPort = inpPort;
                        
                    }
                    
                    
                } else {
                   stopServerDispatcher();
                   /*
                   serverStarted =false;
                   button.setText("Запуск");
                   */
                }
            }
        } );

        configureLogger();
        
        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
        
        
        //java.util.logging.
    }
    
    public void startServerDispatcher(Integer portAddr) {
        //see at the end: http://tutorials.jenkov.com/java-multithreaded-servers/multithreaded-server.html
        try {
            serverDispatcher = new MultiThreadedServer(portAddr);
            new Thread(serverDispatcher).start();
        } catch (Exception e) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, "Виникла проблема при запуску сервера: "+e.getMessage());
            serverStarted = false;
            button.setText("Запуск");
            return;
        }
        
        Logger.getLogger(MainJFrame.class.getName()).log(Level.INFO, "Сервер запущено, порт: "+portAddr.toString());
        serverStarted = true;
        button.setText("Стоп");
    }
    
    public void stopServerDispatcher() {
        try {
            serverDispatcher.stop();
        } catch (Exception e) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, "Виникла проблема при зупинці сервера: "+e.getMessage());
        } finally {
            serverStarted =false;
            button.setText("Запуск"); 
        }
        Logger.getLogger(MainJFrame.class.getName()).log(Level.INFO, "Сервер зупинено");
    }
    public void configureLogger() {
        //configure logger. mind jEditorPane1 not null
        TextAreaHandler textAreaHandler = new TextAreaHandler();
        textAreaHandler.setTextArea(this.jEditorPane1);
        Logger.getLogger(MainJFrame.class.getName()).addHandler(textAreaHandler);
        Logger.getLogger(MultiThreadedServer.class.getName()).addHandler(textAreaHandler);
        Logger.getLogger(WorkerRunnable.class.getName()).addHandler(textAreaHandler);
        /*
        Logger.getLogger(MainJFrame.class.getName()).log(Level.INFO,  "ROLL");
        Logger.getLogger(MainJFrame.class.getName()).log(Level.INFO,  "ROLL2");
        Logger.getLogger(MainJFrame.class.getName()).log(Level.INFO,  "ROLL3");
        */
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button;
    private javax.swing.JTextPane jEditorPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    
    private JTabbedPane tabbedPane;
    public javax.swing.JTextPane jEditorPane2;
    private javax.swing.JScrollPane jScrollPane2;
    private JPanel sendToPanel;
    private javax.swing.JButton sendMsgButton;
    
    private javax.swing.JTextField hostLine;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JLabel portLabel;
    private javax.swing.JFormattedTextField portLine;
    
    
    
    // End of variables declaration//GEN-END:variables
    private Integer usedPort = 9000;
    private Boolean serverStarted = false;
    MultiThreadedServer serverDispatcher;
    
}
